/* Generated by JTB 1.4.7 */
package parser.visitor;

import parser.syntaxtree.*;
import java.util.*;

public class DepthFirstRetArguVisitor<R, A> implements IRetArguVisitor<R, A> {


  public R visit(final NodeChoice n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    final R nRes = n.choice.accept(this, argu);
    return nRes;
  }

  public R visit(final NodeList n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this, argu);
    }
    return nRes;
  }

  public R visit(final NodeListOptional n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this, argu);
        }
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeOptional n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      final R nRes = n.node.accept(this, argu);
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeSequence n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this, argu);
    }
    return nRes;
  }

  public R visit(final NodeTCF n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final NodeToken n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final Scope n, final A argu) {
    R nRes = null;
    // f0 -> . %0 Spell()
    // .. .. | %1 Permanent()
    // .. .. | %2 Creature()
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final Spell n, final A argu) {
    R nRes = null;
    // f0 -> <SPELL>
    n.f0.accept(this, argu);
    // f1 -> Name()
    n.f1.accept(this, argu);
    // f2 -> <LBLOCK>
    n.f2.accept(this, argu);
    // f3 -> Element()
    n.f3.accept(this, argu);
    // f4 -> Cost()
    n.f4.accept(this, argu);
    // f5 -> Subtype()
    n.f5.accept(this, argu);
    // f6 -> Text()
    n.f6.accept(this, argu);
    // f7 -> <RBLOCK>
    n.f7.accept(this, argu);
    return nRes;
  }

  public R visit(final Permanent n, final A argu) {
    R nRes = null;
    // f0 -> <PERMANENT>
    n.f0.accept(this, argu);
    // f1 -> Name()
    n.f1.accept(this, argu);
    // f2 -> <LBLOCK>
    n.f2.accept(this, argu);
    // f3 -> Element()
    n.f3.accept(this, argu);
    // f4 -> Cost()
    n.f4.accept(this, argu);
    // f5 -> Subtype()
    n.f5.accept(this, argu);
    // f6 -> Text()
    n.f6.accept(this, argu);
    // f7 -> <RBLOCK>
    n.f7.accept(this, argu);
    return nRes;
  }

  public R visit(final Creature n, final A argu) {
    R nRes = null;
    // f0 -> <CREATURE>
    n.f0.accept(this, argu);
    // f1 -> Name()
    n.f1.accept(this, argu);
    // f2 -> <LBLOCK>
    n.f2.accept(this, argu);
    // f3 -> Element()
    n.f3.accept(this, argu);
    // f4 -> Cost()
    n.f4.accept(this, argu);
    // f5 -> Subtype()
    n.f5.accept(this, argu);
    // f6 -> Stat()
    n.f6.accept(this, argu);
    // f7 -> Text()
    n.f7.accept(this, argu);
    // f8 -> <RBLOCK>
    n.f8.accept(this, argu);
    return nRes;
  }

  public R visit(final Name n, final A argu) {
    R nRes = null;
    // f0 -> <WORD>
    n.f0.accept(this, argu);
    // f1 -> ( %0 <WORD>
    // .. .. | %1 <PUNCT> )*
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final Element n, final A argu) {
    R nRes = null;
    // f0 -> <ELEMENT>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> <ELEMENTS>
    n.f2.accept(this, argu);
    // f3 -> <RPAR>
    n.f3.accept(this, argu);
    return nRes;
  }

  public R visit(final Cost n, final A argu) {
    R nRes = null;
    // f0 -> <COST>
    n.f0.accept(this, argu);
    // f1 -> ( %0 Mono()
    // .. .. | %1 Duo()
    // .. .. | %2 Trio() )
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final Mono n, final A argu) {
    R nRes = null;
    // f0 -> <MONO>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> <NUMBER>
    n.f2.accept(this, argu);
    // f3 -> <ELEMENTS>
    n.f3.accept(this, argu);
    // f4 -> <RPAR>
    n.f4.accept(this, argu);
    return nRes;
  }

  public R visit(final Duo n, final A argu) {
    R nRes = null;
    // f0 -> <DUO>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> <NUMBER>
    n.f2.accept(this, argu);
    // f3 -> <ELEMENTS>
    n.f3.accept(this, argu);
    // f4 -> <NUMBER>
    n.f4.accept(this, argu);
    // f5 -> <ELEMENTS>
    n.f5.accept(this, argu);
    // f6 -> <RPAR>
    n.f6.accept(this, argu);
    return nRes;
  }

  public R visit(final Trio n, final A argu) {
    R nRes = null;
    // f0 -> <TRIO>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> <NUMBER>
    n.f2.accept(this, argu);
    // f3 -> <ELEMENTS>
    n.f3.accept(this, argu);
    // f4 -> <NUMBER>
    n.f4.accept(this, argu);
    // f5 -> <ELEMENTS>
    n.f5.accept(this, argu);
    // f6 -> <NUMBER>
    n.f6.accept(this, argu);
    // f7 -> <ELEMENTS>
    n.f7.accept(this, argu);
    // f8 -> <RPAR>
    n.f8.accept(this, argu);
    return nRes;
  }

  public R visit(final Subtype n, final A argu) {
    R nRes = null;
    // f0 -> <SUBTYPE>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> ( <WORD> )+
    n.f2.accept(this, argu);
    // f3 -> <RPAR>
    n.f3.accept(this, argu);
    return nRes;
  }

  public R visit(final Text n, final A argu) {
    R nRes = null;
    // f0 -> <TEXT>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> ( %0 <WORD>
    // .. .. | %1 <ELEMENTS>
    // .. .. | %2 <PUNCT>
    // .. .. | %3 <MATH>
    // .. .. | %4 <NUMBER> )*
    n.f2.accept(this, argu);
    // f3 -> <RPAR>
    n.f3.accept(this, argu);
    return nRes;
  }

  public R visit(final Stat n, final A argu) {
    R nRes = null;
    // f0 -> <STAT>
    n.f0.accept(this, argu);
    // f1 -> <LPAR>
    n.f1.accept(this, argu);
    // f2 -> <NUMBER>
    n.f2.accept(this, argu);
    // f3 -> <NUMBER>
    n.f3.accept(this, argu);
    // f4 -> <NUMBER>
    n.f4.accept(this, argu);
    // f5 -> <RPAR>
    n.f5.accept(this, argu);
    return nRes;
  }

}
