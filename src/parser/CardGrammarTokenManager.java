/* CardGrammarTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CardGrammarTokenManager.java */
package parser;

/** Token Manager. */
@SuppressWarnings("unused")
public class CardGrammarTokenManager implements CardGrammarConstants {

	/** Debug output. */
	public static java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x24000L) != 0L) {
				jjmatchedKind = 24;
				return 21;
			}
			if ((active0 & 0x400L) != 0L) {
				jjmatchedKind = 24;
				return 6;
			}
			if ((active0 & 0x1b00L) != 0L) {
				jjmatchedKind = 24;
				return 39;
			}
			if ((active0 & 0x18080L) != 0L) {
				jjmatchedKind = 24;
				return 18;
			}
			if ((active0 & 0x2000L) != 0L) {
				jjmatchedKind = 24;
				return 52;
			}
			return -1;
		case 1:
			if ((active0 & 0x80L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 1;
				return 17;
			}
			if ((active0 & 0x3ff00L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 1;
				return 39;
			}
			return -1;
		case 2:
			if ((active0 & 0x2000L) != 0L)
				return 39;
			if ((active0 & 0x3df80L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 2;
				return 39;
			}
			return -1;
		case 3:
			if ((active0 & 0x8780L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 3;
				return 39;
			}
			if ((active0 & 0x35800L) != 0L)
				return 39;
			return -1;
		case 4:
			if ((active0 & 0x8700L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 4;
				return 39;
			}
			if ((active0 & 0x80L) != 0L)
				return 39;
			return -1;
		case 5:
			if ((active0 & 0x8700L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 5;
				return 39;
			}
			return -1;
		case 6:
			if ((active0 & 0x300L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 6;
				return 39;
			}
			if ((active0 & 0x8400L) != 0L)
				return 39;
			return -1;
		case 7:
			if ((active0 & 0x100L) != 0L) {
				jjmatchedKind = 24;
				jjmatchedPos = 7;
				return 39;
			}
			if ((active0 & 0x200L) != 0L)
				return 39;
			return -1;
		default:
			return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	static private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 21);
		case 41:
			return jjStopAtPos(0, 22);
		case 67:
			return jjMoveStringLiteralDfa1_0(0xa00L);
		case 68:
			return jjMoveStringLiteralDfa1_0(0x2000L);
		case 69:
			return jjMoveStringLiteralDfa1_0(0x400L);
		case 77:
			return jjMoveStringLiteralDfa1_0(0x1000L);
		case 80:
			return jjMoveStringLiteralDfa1_0(0x100L);
		case 83:
			return jjMoveStringLiteralDfa1_0(0x18080L);
		case 84:
			return jjMoveStringLiteralDfa1_0(0x24000L);
		case 123:
			return jjStopAtPos(0, 19);
		case 125:
			return jjStopAtPos(0, 20);
		default:
			return jjMoveNfa_0(2, 0);
		}
	}

	static private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 69:
			return jjMoveStringLiteralDfa2_0(active0, 0x20100L);
		case 76:
			return jjMoveStringLiteralDfa2_0(active0, 0x400L);
		case 79:
			return jjMoveStringLiteralDfa2_0(active0, 0x1800L);
		case 80:
			return jjMoveStringLiteralDfa2_0(active0, 0x80L);
		case 82:
			return jjMoveStringLiteralDfa2_0(active0, 0x4200L);
		case 84:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
		case 85:
			return jjMoveStringLiteralDfa2_0(active0, 0xa000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
		case 66:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
		case 69:
			return jjMoveStringLiteralDfa3_0(active0, 0x680L);
		case 73:
			return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
		case 78:
			return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
		case 79:
			if ((active0 & 0x2000L) != 0L)
				return jjStartNfaWithStates_0(2, 13, 39);
			break;
		case 82:
			return jjMoveStringLiteralDfa3_0(active0, 0x100L);
		case 83:
			return jjMoveStringLiteralDfa3_0(active0, 0x800L);
		case 88:
			return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa4_0(active0, 0x200L);
		case 76:
			return jjMoveStringLiteralDfa4_0(active0, 0x80L);
		case 77:
			return jjMoveStringLiteralDfa4_0(active0, 0x500L);
		case 79:
			if ((active0 & 0x1000L) != 0L)
				return jjStartNfaWithStates_0(3, 12, 39);
			else if ((active0 & 0x4000L) != 0L)
				return jjStartNfaWithStates_0(3, 14, 39);
			break;
		case 84:
			if ((active0 & 0x800L) != 0L)
				return jjStartNfaWithStates_0(3, 11, 39);
			else if ((active0 & 0x10000L) != 0L)
				return jjStartNfaWithStates_0(3, 16, 39);
			else if ((active0 & 0x20000L) != 0L)
				return jjStartNfaWithStates_0(3, 17, 39);
			return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa5_0(active0, 0x100L);
		case 69:
			return jjMoveStringLiteralDfa5_0(active0, 0x400L);
		case 76:
			if ((active0 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(4, 7, 39);
			break;
		case 84:
			return jjMoveStringLiteralDfa5_0(active0, 0x200L);
		case 89:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 78:
			return jjMoveStringLiteralDfa6_0(active0, 0x500L);
		case 80:
			return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
		case 85:
			return jjMoveStringLiteralDfa6_0(active0, 0x200L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 69:
			if ((active0 & 0x8000L) != 0L)
				return jjStartNfaWithStates_0(6, 15, 39);
			return jjMoveStringLiteralDfa7_0(active0, 0x100L);
		case 82:
			return jjMoveStringLiteralDfa7_0(active0, 0x200L);
		case 84:
			if ((active0 & 0x400L) != 0L)
				return jjStartNfaWithStates_0(6, 10, 39);
			break;
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	static private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
		case 69:
			if ((active0 & 0x200L) != 0L)
				return jjStartNfaWithStates_0(7, 9, 39);
			break;
		case 78:
			return jjMoveStringLiteralDfa8_0(active0, 0x100L);
		default:
			break;
		}
		return jjStartNfa_0(6, active0);
	}

	static private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0);
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0);
			return 8;
		}
		switch (curChar) {
		case 84:
			if ((active0 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(8, 8, 39);
			break;
		default:
			break;
		}
		return jjStartNfa_0(7, active0);
	}

	static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = SimpleCharStream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL,
			0xffffffffffffffffL };

	static private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 71;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 6:
					case 39:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 24)
							kind = 24;
						{
							jjCheckNAdd(39);
						}
						break;
					case 21:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 24)
							kind = 24;
						{
							jjCheckNAdd(39);
						}
						break;
					case 2:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						} else if ((0xc00508000000000L & l) != 0L) {
							if (kind > 25)
								kind = 25;
						} else if ((0xac0000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
						}
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 23)
								kind = 23;
							{
								jjCheckNAdd(38);
							}
						} else if (curChar == 47) {
							jjAddStates(0, 1);
						} else if (curChar == 45) {
							jjCheckNAdd(38);
						}
						break;
					case 18:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 24)
							kind = 24;
						{
							jjCheckNAdd(39);
						}
						break;
					case 17:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 24)
							kind = 24;
						{
							jjCheckNAdd(39);
						}
						break;
					case 52:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 24)
							kind = 24;
						{
							jjCheckNAdd(39);
						}
						break;
					case 37:
						if (curChar == 45) {
							jjCheckNAdd(38);
						}
						break;
					case 38:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 23)
							kind = 23;
						{
							jjCheckNAdd(38);
						}
						break;
					case 40:
						if ((0xc00508000000000L & l) != 0L && kind > 25)
							kind = 25;
						break;
					case 41:
						if ((0xac0000000000L & l) != 0L && kind > 26)
							kind = 26;
						break;
					case 59:
						if (curChar == 47) {
							jjAddStates(0, 1);
						}
						break;
					case 60:
						if (curChar == 47) {
							jjCheckNAddStates(2, 4);
						}
						break;
					case 61:
						if ((0xffffffffffffdbffL & l) != 0L) {
							jjCheckNAddStates(2, 4);
						}
						break;
					case 62:
						if ((0x2400L & l) != 0L && kind > 5)
							kind = 5;
						break;
					case 63:
						if (curChar == 10 && kind > 5)
							kind = 5;
						break;
					case 64:
						if (curChar == 13)
							jjstateSet[jjnewStateCnt++] = 63;
						break;
					case 65:
						if (curChar == 42) {
							jjCheckNAddTwoStates(66, 67);
						}
						break;
					case 66:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(66, 67);
						}
						break;
					case 67:
						if (curChar == 42) {
							jjAddStates(5, 6);
						}
						break;
					case 68:
						if ((0xffff7fffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(69, 67);
						}
						break;
					case 69:
						if ((0xfffffbffffffffffL & l) != 0L) {
							jjCheckNAddTwoStates(69, 67);
						}
						break;
					case 70:
						if (curChar == 47 && kind > 6)
							kind = 6;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 6:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						}
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 21:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						}
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 20;
						break;
					case 2:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						}
						if (curChar == 68) {
							jjAddStates(7, 8);
						} else if (curChar == 76) {
							jjAddStates(9, 10);
						} else if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 35;
						else if (curChar == 86)
							jjstateSet[jjnewStateCnt++] = 29;
						else if (curChar == 78)
							jjstateSet[jjnewStateCnt++] = 25;
						else if (curChar == 84)
							jjstateSet[jjnewStateCnt++] = 21;
						else if (curChar == 83)
							jjstateSet[jjnewStateCnt++] = 18;
						else if (curChar == 70)
							jjstateSet[jjnewStateCnt++] = 14;
						else if (curChar == 87)
							jjstateSet[jjnewStateCnt++] = 10;
						else if (curChar == 69)
							jjstateSet[jjnewStateCnt++] = 6;
						else if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 18:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						}
						if (curChar == 80)
							jjstateSet[jjnewStateCnt++] = 17;
						break;
					case 17:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						}
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 16;
						break;
					case 52:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 24)
								kind = 24;
							{
								jjCheckNAdd(39);
							}
						}
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 57;
						else if (curChar == 69)
							jjstateSet[jjnewStateCnt++] = 51;
						break;
					case 0:
						if (curChar == 82 && kind > 18)
							kind = 18;
						break;
					case 1:
						if (curChar == 73) {
							jjCheckNAdd(0);
						}
						break;
					case 3:
						if (curChar == 72 && kind > 18)
							kind = 18;
						break;
					case 4:
					case 50:
						if (curChar == 84) {
							jjCheckNAdd(3);
						}
						break;
					case 5:
						if (curChar == 82)
							jjstateSet[jjnewStateCnt++] = 4;
						break;
					case 7:
						if (curChar == 69)
							jjstateSet[jjnewStateCnt++] = 6;
						break;
					case 8:
						if (curChar == 69) {
							jjCheckNAdd(0);
						}
						break;
					case 9:
						if (curChar == 84)
							jjstateSet[jjnewStateCnt++] = 8;
						break;
					case 10:
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 11:
						if (curChar == 87)
							jjstateSet[jjnewStateCnt++] = 10;
						break;
					case 12:
						if (curChar == 69 && kind > 18)
							kind = 18;
						break;
					case 13:
						if (curChar == 82) {
							jjCheckNAdd(12);
						}
						break;
					case 14:
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 13;
						break;
					case 15:
						if (curChar == 70)
							jjstateSet[jjnewStateCnt++] = 14;
						break;
					case 16:
						if (curChar == 67) {
							jjCheckNAdd(12);
						}
						break;
					case 19:
						if (curChar == 83)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 20:
						if (curChar == 77) {
							jjCheckNAdd(12);
						}
						break;
					case 22:
						if (curChar == 84)
							jjstateSet[jjnewStateCnt++] = 21;
						break;
					case 23:
						if (curChar == 83 && kind > 18)
							kind = 18;
						break;
					case 24:
						if (curChar == 85) {
							jjCheckNAdd(23);
						}
						break;
					case 25:
						if (curChar == 79)
							jjstateSet[jjnewStateCnt++] = 24;
						break;
					case 26:
						if (curChar == 78)
							jjstateSet[jjnewStateCnt++] = 25;
						break;
					case 27:
						if (curChar == 68 && kind > 18)
							kind = 18;
						break;
					case 28:
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 27;
						break;
					case 29:
						if (curChar == 79)
							jjstateSet[jjnewStateCnt++] = 28;
						break;
					case 30:
						if (curChar == 86)
							jjstateSet[jjnewStateCnt++] = 29;
						break;
					case 31:
						if (curChar == 79) {
							jjCheckNAdd(0);
						}
						break;
					case 32:
						if (curChar == 76)
							jjstateSet[jjnewStateCnt++] = 31;
						break;
					case 33:
						if (curChar == 79)
							jjstateSet[jjnewStateCnt++] = 32;
						break;
					case 34:
						if (curChar == 67)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 35:
						if (curChar == 78)
							jjstateSet[jjnewStateCnt++] = 34;
						break;
					case 36:
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 35;
						break;
					case 39:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 24)
							kind = 24;
						{
							jjCheckNAdd(39);
						}
						break;
					case 42:
						if (curChar == 76) {
							jjAddStates(9, 10);
						}
						break;
					case 43:
						if (curChar == 70) {
							jjCheckNAdd(12);
						}
						break;
					case 44:
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 43;
						break;
					case 45:
						if (curChar == 84 && kind > 18)
							kind = 18;
						break;
					case 46:
						if (curChar == 72)
							jjstateSet[jjnewStateCnt++] = 45;
						break;
					case 47:
						if (curChar == 71)
							jjstateSet[jjnewStateCnt++] = 46;
						break;
					case 48:
						if (curChar == 73)
							jjstateSet[jjnewStateCnt++] = 47;
						break;
					case 49:
						if (curChar == 68) {
							jjAddStates(7, 8);
						}
						break;
					case 51:
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 50;
						break;
					case 53:
						if (curChar == 83) {
							jjCheckNAdd(23);
						}
						break;
					case 54:
						if (curChar == 69)
							jjstateSet[jjnewStateCnt++] = 53;
						break;
					case 55:
						if (curChar == 78)
							jjstateSet[jjnewStateCnt++] = 54;
						break;
					case 56:
						if (curChar == 75)
							jjstateSet[jjnewStateCnt++] = 55;
						break;
					case 57:
						if (curChar == 82)
							jjstateSet[jjnewStateCnt++] = 56;
						break;
					case 58:
						if (curChar == 65)
							jjstateSet[jjnewStateCnt++] = 57;
						break;
					case 61: {
						jjAddStates(2, 4);
					}
						break;
					case 66: {
						jjCheckNAddTwoStates(66, 67);
					}
						break;
					case 68:
					case 69: {
						jjCheckNAddTwoStates(69, 67);
					}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 61:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjAddStates(2, 4);
						}
						break;
					case 66:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(66, 67);
						}
						break;
					case 68:
					case 69:
						if ((jjbitVec0[i2] & l2) != 0L) {
							jjCheckNAddTwoStates(69, 67);
						}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 71 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = SimpleCharStream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 60, 65, 61, 62, 64, 68, 70, 52, 58, 44,
			48, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null,
			null, null, null, "\123\120\105\114\114",
			"\120\105\122\115\101\116\105\116\124",
			"\103\122\105\101\124\125\122\105", "\105\114\105\115\105\116\124",
			"\103\117\123\124", "\115\117\116\117", "\104\125\117",
			"\124\122\111\117", "\123\125\102\124\131\120\105",
			"\123\124\101\124", "\124\105\130\124", null, "\173", "\175",
			"\50", "\51", null, null, null, null, null, null, };

	static protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
		beginLine = SimpleCharStream.getBeginLine();
		beginColumn = SimpleCharStream.getBeginColumn();
		endLine = SimpleCharStream.getEndLine();
		endColumn = SimpleCharStream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;

	/** Get the next Token. */
	public static Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = SimpleCharStream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				jjmatchedPos = -1;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				SimpleCharStream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = SimpleCharStream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					SimpleCharStream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = SimpleCharStream.getEndLine();
			int error_column = SimpleCharStream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				SimpleCharStream.readChar();
				SimpleCharStream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				SimpleCharStream.backup(1);
				error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
					error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	static private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

	/** Constructor. */
	public CardGrammarTokenManager(SimpleCharStream stream) {

		if (input_stream != null)
			throw new TokenMgrError(
					"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
					TokenMgrError.STATIC_LEXER_ERROR);

		input_stream = stream;
	}

	/** Constructor. */
	public CardGrammarTokenManager(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 71; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	static public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x7ffff81L, };
	static final long[] jjtoSkip = { 0x7eL, };
	static protected SimpleCharStream input_stream;

	static private final int[] jjrounds = new int[71];
	static private final int[] jjstateSet = new int[2 * 71];

	static protected char curChar;
}
