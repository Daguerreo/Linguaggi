/* Generated by JTB 1.4.7 */


options
{
  static = true;
  // JTB_P = "parser";
}

PARSER_BEGIN(CardGrammar)
package parser;

import parser.visitor.*;
import java.awt.EventQueue;
import gui.MainWindow;
import parser.syntaxtree.*;


public class CardGrammar {

  public static void main(String args[]) {
    EventQueue.invokeLater(new Runnable(){

      public void run() {
        try {
          MainWindow window = new MainWindow();
        }
        catch (Exception e) {
          e.printStackTrace();
        }
      }
    }
);
  }
}


class MyVisitor extends DepthFirstVoidVisitor {

  public void visit(NodeToken n) {
    System.out.println("visit " + n.tokenImage);
  }
}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(CardGrammar)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" ( ~["\n", "\r"] )* ( "\n"| "\r"| "\r\n" ) >
| < "/*" ( ~["*"] )* "*" ( ~["/"] ( ~["*"] )* "*" )* "/" >
}

TOKEN :
{
  < SPELL : "SPELL" >
| < PERMANENT : "PERMANENT" >
| < CREATURE : "CREATURE" >
| < ELEMENT : "ELEMENT" >
| < COST : "COST" >
| < MONO : "MONO" >
| < DUO : "DUO" >
| < TRIO : "TRIO" >
| < SUBTYPE : "SUBTYPE" >
| < STAT : "STAT" >
| < TEXT : "TEXT" >
| < ELEMENTS : "AIR"| "EARTH"| "WATER"| "FIRE"| "LIFE"| "DEATH"| "SPACE"| "TIME"| "LIGHT"| "DARKNESS"| "NOUS"| "VOID"| "INCOLOR" >
| < LBLOCK : "{" >
| < RBLOCK : "}" >
| < LPAR : "(" >
| < RPAR : ")" >
| < NUMBER : ( "-" )? ( <DIGIT> )+ >
| < WORD : ( <DIGIT>| <LETTER> )+ >
| < PUNCT : ","| "."| ":"| ";"| "'" >
| < MATH : "+"| "-"| "*"| "/" >
| < #DIGIT : ["0"-"9"] >
| < #LETTER : ["a"-"z"]| ["A"-"Z"] >
}

Scope Scope() :
{
  // --- JTB generated node declarations ---
  NodeChoice n0 = null;
  Spell n1 = null;
  Permanent n2 = null;
  Creature n3 = null;
}
{
  (
    n1 = Spell()
    { n0 = new NodeChoice(n1, 0, 3); }
  |
    n2 = Permanent()
    { n0 = new NodeChoice(n2, 1, 3); }
  |
    n3 = Creature()
    { n0 = new NodeChoice(n3, 2, 3); }
  )
  { return new Scope(n0); }
}

Spell Spell() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Element n5 = null;
  Cost n6 = null;
  Subtype n7 = null;
  Text n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = < SPELL >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Name()
  n4 = < LBLOCK >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = Element()
  n6 = Cost()
  n7 = Subtype()
  n8 = Text()
  n10 = < RBLOCK >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new Spell(n0, n2, n3, n5, n6, n7, n8, n9); }
}

Permanent Permanent() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Element n5 = null;
  Cost n6 = null;
  Subtype n7 = null;
  Text n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
}
{
  n1 = < PERMANENT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Name()
  n4 = < LBLOCK >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = Element()
  n6 = Cost()
  n7 = Subtype()
  n8 = Text()
  n10 = < RBLOCK >
  { n9 = JTBToolkit.makeNodeToken(n10); }
  { return new Permanent(n0, n2, n3, n5, n6, n7, n8, n9); }
}

Creature Creature() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  Name n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  Element n5 = null;
  Cost n6 = null;
  Subtype n7 = null;
  Stat n8 = null;
  Text n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < CREATURE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n2 = Name()
  n4 = < LBLOCK >
  { n3 = JTBToolkit.makeNodeToken(n4); }
  n5 = Element()
  n6 = Cost()
  n7 = Subtype()
  n8 = Stat()
  n9 = Text()
  n11 = < RBLOCK >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new Creature(n0, n2, n3, n5, n6, n7, n8, n9, n10); }
}

Name Name() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeListOptional n2 = new NodeListOptional();
  NodeChoice n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < WORD >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n5 = < WORD >
      { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3 = new NodeChoice(n4, 0, 2); }
    |
      n7 = < PUNCT >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3 = new NodeChoice(n6, 1, 2); }
    )
    { n2.addNode(n3); }
  )*
  { n2.nodes.trimToSize(); }
  { return new Name(n0, n2); }
}

Element Element() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < ELEMENT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < ELEMENTS >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < RPAR >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new Element(n0, n2, n4, n6); }
}

Cost Cost() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  Mono n3 = null;
  Duo n4 = null;
  Trio n5 = null;
}
{
  n1 = < COST >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n3 = Mono()
      { n2 = new NodeChoice(n3, 0, 3); }
    |
      n4 = Duo()
      { n2 = new NodeChoice(n4, 1, 3); }
    |
      n5 = Trio()
      { n2 = new NodeChoice(n5, 2, 3); }
    )
    
  )
  { return new Cost(n0, n2); }
}

Mono Mono() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
}
{
  n1 = < MONO >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < NUMBER >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < ELEMENTS >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < RPAR >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  { return new Mono(n0, n2, n4, n6, n8); }
}

Duo Duo() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
}
{
  n1 = < DUO >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < NUMBER >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < ELEMENTS >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < NUMBER >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = < ELEMENTS >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n13 = < RPAR >
  { n12 = JTBToolkit.makeNodeToken(n13); }
  { return new Duo(n0, n2, n4, n6, n8, n10, n12); }
}

Trio Trio() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  n1 = < TRIO >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < NUMBER >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < ELEMENTS >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < NUMBER >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = < ELEMENTS >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  n13 = < NUMBER >
  { n12 = JTBToolkit.makeNodeToken(n13); }
  n15 = < ELEMENTS >
  { n14 = JTBToolkit.makeNodeToken(n15); }
  n17 = < RPAR >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  { return new Trio(n0, n2, n4, n6, n8, n10, n12, n14, n16); }
}

Subtype Subtype() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeList n4 = new NodeList();
  NodeToken n5 = null;
  Token n6 = null;
  NodeToken n7 = null;
  Token n8 = null;
}
{
  n1 = < SUBTYPE >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    n6 = < WORD >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  )+
  { n4.nodes.trimToSize(); }
  n8 = < RPAR >
  { n7 = JTBToolkit.makeNodeToken(n8); }
  { return new Subtype(n0, n2, n4, n7); }
}

Text Text() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeListOptional n4 = new NodeListOptional();
  NodeChoice n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeToken n12 = null;
  Token n13 = null;
  NodeToken n14 = null;
  Token n15 = null;
  NodeToken n16 = null;
  Token n17 = null;
}
{
  n1 = < TEXT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  (
    (
      n7 = < WORD >
      { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5 = new NodeChoice(n6, 0, 5); }
    |
      n9 = < ELEMENTS >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5 = new NodeChoice(n8, 1, 5); }
    |
      n11 = < PUNCT >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n5 = new NodeChoice(n10, 2, 5); }
    |
      n13 = < MATH >
      { n12 = JTBToolkit.makeNodeToken(n13); }
      { n5 = new NodeChoice(n12, 3, 5); }
    |
      n15 = < NUMBER >
      { n14 = JTBToolkit.makeNodeToken(n15); }
      { n5 = new NodeChoice(n14, 4, 5); }
    )
    { n4.addNode(n5); }
  )*
  { n4.nodes.trimToSize(); }
  n17 = < RPAR >
  { n16 = JTBToolkit.makeNodeToken(n17); }
  { return new Text(n0, n2, n4, n16); }
}

Stat Stat() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
}
{
  n1 = < STAT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LPAR >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < NUMBER >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < NUMBER >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < NUMBER >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n11 = < RPAR >
  { n10 = JTBToolkit.makeNodeToken(n11); }
  { return new Stat(n0, n2, n4, n6, n8, n10); }
}
